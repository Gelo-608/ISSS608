---
title: "Take-home_Ex2"
author: "Gelo"
---

# **Take-home Exercise 2: Be Tradewise or Otherwise**

## Three data visualisation critic:

-   Started

```{r}
pacman::p_load(ggplot2,readxl, dplyr,tidyr,ggrepel,scales,plotly,stringr,ggrepel,gridExtra,grid,lubridate,forecast,vars,tsibble,tidyverse)
```

### Data Visualisation Modification 1 (to be improved)

The original visualisation uses horizontal bars to show export and import data for the period 2020 - 2024 and calculates the total annual trade value. The different years of data are distinguished by different colours and the total value is shown on the right hand side.

Benefits：

-   Provides a visual comparison of exports and imports.

-   The annual total trade value on the right hand side provides additional information for comparing data between years.

Cons：

-   Too many colours make it visually complex.

-   Horizontally arranged bars do not allow for easy comparison of yearly trends.

-   Trade Balance is not clearly displayed, making it difficult to see the profit and loss of imports and exports.

Improvement:

Adopt vertical bar chart + line graph to make the annual trend clearer. Label specific trade values above the bar chart to enhance readability. Add a trade balance (line chart) to highlight the profit and loss.

![](images/Screenshot%202025-03-09%20at%2019.57.07.png)

### The data extraction and preparation process:

Data Import:

Use read_excel() to read the Excel file OutputFile.xlsx, select the T1 worksheet and skip the first 10 rows to get the required data. Data Cleaning and Conversion:

Since the raw data presents the year and month horizontally, it needs to be converted using pivot_longer() to make the data in Long Format (LF). Extract the year information from the Year_Month column and convert to numeric format. Filter only the data from 2020 to 2024 and convert Trade_Value to a numeric value. Data Aggregation:

Filter ‘Total Merchandise Exports, (At Current Prices)’ and ‘Total Merchandise Imports, (At Current Prices)’ in the Data Series. Calculate the total exports and imports for each year and use pivot_wider() to convert the format to Exports and Imports respectively. Calculate Trade_Balance = Exports - Imports.

```{r}
trade_data_by_commodity_t1 <- read_excel("/Users/geloliu/Gelo-608/ISSS608/Take home Ex/Take-home_Ex2/data/OutputFile.xlsx",
                                        sheet = "T1",
                                        col_names = TRUE,
                                        skip = 10) %>%
  mutate(across(everything(), as.character))

trade_data_long <- trade_data_by_commodity_t1 %>%
  pivot_longer(cols = -1,
               names_to = "Year_Month",
               values_to = "Trade_Value") %>%
  mutate(Year = str_extract(Year_Month, "20[0-9]{2}")) %>%
  filter(Year %in% c("2020", "2021", "2022", "2023", "2024")) %>%
  mutate(Trade_Value = as.numeric(Trade_Value))

# summarized data
trade_summary <- trade_data_long %>%
  filter(`Data Series` %in% c("Total Merchandise Exports, (At Current Prices)",
                              "Total Merchandise Imports, (At Current Prices)")) %>%
  group_by(Year, `Data Series`) %>%
  summarise(Total = sum(Trade_Value, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = `Data Series`, values_from = Total) %>%
  rename(Exports = `Total Merchandise Exports, (At Current Prices)`,
         Imports = `Total Merchandise Imports, (At Current Prices)`) %>%
  mutate(Trade_Balance = Exports - Imports)


trade_long <- trade_summary %>%
  pivot_longer(cols = c("Exports", "Imports"),
               names_to = "Trade_Type",
               values_to = "Trade_Value")

```

```{r}
#| fig-height: 10
#| fig-width: 12
ggplot() +
  geom_col(data = trade_long, 
           aes(x = Year, y = Trade_Value / 1e6, fill = Trade_Type),
           position = position_dodge(width = 0.8), width = 0.7) +
  
  geom_line(data = trade_summary, 
            aes(x = Year, y = Trade_Balance / 1e6, group = 1),
            color = "#78c754", linewidth = 1.6) +
  
  geom_point(data = trade_summary, 
             aes(x = Year, y = Trade_Balance / 1e6),
             shape = 24, color = "#78c754", fill = "#78c754", size = 4) +
  
  geom_label(data = trade_long, 
            aes(x = Year, y = Trade_Value / 1e6, 
                label = paste0("S$", round(Trade_Value / 1e6, 1), " Bil"),
                color = Trade_Type),
            position = position_dodge(width = 0.8), 
            vjust = -0.4, size = 4, fontface = "bold", show.legend = FALSE) +
  
  geom_label(data = trade_summary, 
             aes(x = Year, y = Trade_Balance / 1e6,
                 label = paste0("S$", round(Trade_Balance / 1e6, 1), " Bil")),
             fill = "#78c754",
             color = "white", 
             fontface = "bold", 
             size = 4, 
             vjust = -1.2,
             label.size = 0.1) +
  
  scale_fill_manual(values = c("Exports" = "#6cb6d9", "Imports" = "#C0504D")) +
  scale_color_manual(values = c("Exports" = "#5B9BD5", "Imports" = "#C0504D")) +

  scale_y_continuous(labels = scales::label_number(scale = 1, suffix = " Bil")) +

  labs(title = "TOTAL MERCHANDISE TRADE AT CURRENT PRICES, 2020 - 2024",
       y = "Trade Value (S$ Billion)",
       x = "Year",
       fill = "Trade Type") +
  
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
    legend.position = "top",
    legend.title = element_blank(),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
```

### Data Visualisation Modification 2 (to be improved)

Benefits：

-   Use of bubble charts to visualise trade volumes of different countries for easy comparison.

-   Indicates total trade volume by bubble size, highlighting the importance of major trading partners.

Disadvantages：

-   Lack of information on annual growth rate makes it difficult to judge the trend of trade changes among countries.

Improvement：

-   Add year-on-year growth rate (YoY%) to visually display the trend of trade dynamics. Adjust the layout of country labels to avoid overlapping and make the information more readable.

![](images/Screenshot%202025-03-08%20at%2011.41.39.png)

### Data Extraction and Preparation Process：

Trade data for the year 2024 was extracted from an Excel file consisting of Imports, Domestic Exports and Re-Exports. The data was processed as follows:

-   Reading the data

Use read_excel() to read the Excel file containing the trade data for each country. Select the appropriate sheet (T1 for Imports, T2 for Domestic Exports, T3 for Re-Exports) and skip the first 10 rows to get the correct column names.

-   Data Cleaning and Formatting

pivot_longer() converts data from a wide table to a long table format for analysis by year and month. gsub(‘,’, ‘’, value) removes commas from the data so that values can be properly converted to numeric.

-   Calculate total exports

Calculate Total Exports = Domestic Exports + Re-exports by combining the domestic exports and re-exports data with inner_join().

-   Calculate total trade value and trade balance

Further merge the import data to calculate Total Trade = Imports + Total Exports and Trade Balance = Total Exports - Imports. Filter out unwanted categories (e.g. ‘Total All Markets’, ‘Asia’, ‘America’, etc. for continental aggregates).

-   Filter top 10 major trading partners

Visualise the top 10 trading partners sorted by Trade_Value.

```{r}
imports_country <- read_excel("/Users/geloliu/Gelo-608/ISSS608/Take home Ex/Take-home_Ex2/data/OutputFile-2.xlsx", sheet = "T1", col_names = TRUE, skip = 10)
domestic_exports_country <- read_excel("/Users/geloliu/Gelo-608/ISSS608/Take home Ex/Take-home_Ex2/data/OutputFile-2.xlsx", sheet = "T2", col_names = TRUE, skip = 10)
re_exports_country <- read_excel("/Users/geloliu/Gelo-608/ISSS608/Take home Ex/Take-home_Ex2/data/OutputFile-2.xlsx", sheet = "T3", col_names = TRUE, skip = 10)

# Imports
imports_long <- imports_country %>%
  pivot_longer(cols = starts_with("2024"), names_to = "Month", values_to = "Imports") %>%
  mutate(Imports = as.numeric(gsub(",", "", Imports))) %>%
  group_by(`Data Series`) %>%
  summarise(Imports = sum(Imports, na.rm = TRUE)) %>%
  rename(Country = `Data Series`)

# Domestic Exports
domestic_exports_long <- domestic_exports_country %>%
  pivot_longer(cols = starts_with("2024"), names_to = "Month", values_to = "Domestic_Exports") %>%
  mutate(Domestic_Exports = as.numeric(gsub(",", "", Domestic_Exports))) %>%
  group_by(`Data Series`) %>%
  summarise(Domestic_Exports = sum(Domestic_Exports, na.rm = TRUE)) %>%
  rename(Country = `Data Series`)

# Re-Exports
re_exports_long <- re_exports_country %>%
  pivot_longer(cols = starts_with("2024"), names_to = "Month", values_to = "Re_Exports") %>%
  mutate(Re_Exports = as.numeric(gsub(",", "", Re_Exports))) %>%
  group_by(`Data Series`) %>%
  summarise(Re_Exports = sum(Re_Exports, na.rm = TRUE)) %>%
  rename(Country = `Data Series`)

# Calculating total Exports
exports_total <- domestic_exports_long %>%
  inner_join(re_exports_long, by = "Country", multiple = "all") %>%
  mutate(Exports = Domestic_Exports + Re_Exports)

# Combine Imports and Exports to calculate total trade value and trade balance
trade_summary_2024 <- imports_long %>%
  inner_join(exports_total, by = "Country", multiple = "all") %>%
  mutate(Trade_Value = Imports + Exports,
         Trade_Balance = Exports - Imports)

trade_summary_2024_clean <- trade_summary_2024 %>%
  filter(!Country %in% c("Total All Markets", "Asia",  "America","Oceania","Africa"))
trade_summary_2024_top10 <- trade_summary_2024_clean %>%
  arrange(desc(Trade_Value)) %>%
  slice_head(n = 10)
```

```{#| fig-height: 10}
#| fig-width: 12

trade_summary_2024_top10$Country <- gsub("Republic of Korea", "Rep of Korea", trade_summary_2024_top10$Country)

max_value <- 120

p <- ggplot(trade_summary_2024_top10, aes(x = Exports_Bil, y = Imports_Bil)) +
  geom_polygon(data = data.frame(x = c(0, max_value, max_value), 
                                y = c(0, 0, max_value)),
              aes(x = x, y = y), fill = "#e1f5e1", alpha = 0.6) +
  geom_polygon(data = data.frame(x = c(0, 0, max_value), 
                                y = c(0, max_value, max_value)),
              aes(x = x, y = y), fill = "#e1e1f5", alpha = 0.6) +
  
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50", alpha = 0.6) +
  
  geom_point(aes(size = Trade_Value_Bil, fill = Country), 
             shape = 21, color = "white", alpha = 0.9, stroke = 1.2) +
  
  geom_point(color = "white", size = 2) +

  scale_x_continuous(
    name = "Exports (S$ Bil)",
    limits = c(0, max_value),
    expand = c(0, 0),
    breaks = seq(0, max_value, by = 10)
  ) +
  scale_y_continuous(
    name = "Imports\n(S$ Bil)",
    limits = c(0, max_value),
    expand = c(0, 0),
    breaks = seq(0, max_value, by = 10)
  ) +
  
  scale_size_continuous(
    range = c(7, 25),
    guide = "none"
  ) +
  
  scale_fill_manual(
    values = c("China" = "#7ECECA", "Malaysia" = "#8BBE65", 
               "United States" = "#2F6D7A", "Taiwan" = "#E87A5D", 
               "EU" = "#5C6BC0", "Hong Kong" = "#BA68C8", 
               "Indonesia" = "#37474F", "Japan" = "#F9A825",
               "Rep of Korea" = "#795548", "Thailand" = "#3F51B5"),
    guide = "none"
  ) +
  
  labs(
    title = "MERCHANDISE TRADE PERFORMANCE",
    subtitle = "WITH MAJOR TRADING PARTNERS, 2024"
  ) +
  
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "#537AAC"),
    plot.subtitle = element_text(hjust = 0.5, size = 16, color = "#537AAC"),
    panel.grid = element_blank(),
    plot.margin = margin(20, 20, 20, 20),
    axis.title.x = element_text(size = 14, color = "#4682B4", hjust = 0.5),
    axis.title.y = element_text(size = 14, color = "#4682B4", angle = 90, vjust = 0.5),
    axis.text = element_text(size = 12, color = "#4682B4")
  )


p <- p + annotate("text", x = 20, y = 110, 
                label = "Trade Deficit Area (Imports > Exports)",
                color = "#2F6D7A", size = 3.5, fontface = "bold")


p <- p + annotate("text", x = 100, y = 5, 
                label = "Trade Surplus Area (Exports > Imports)",
                color = "#4CAF50", size = 3.5, fontface = "bold")



label_directions <- list(
  "China" = list(dx = 12, dy = 0),    
  "Malaysia" = list(dx = 0, dy = 10), 
  "United States" = list(dx = 0, dy = -10), 
  "Taiwan" = list(dx = -12, dy = 0),  
  "Europe" = list(dx = 0, dy = 10),
  "Hong Kong" = list(dx = 0, dy = 10), 
  "Indonesia" = list(dx = 0, dy = 10), 
  "Japan" = list(dx = -10, dy = 0), 
  "Rep of Korea" = list(dx = 0, dy = 10), 
  "Thailand" = list(dx = -10, dy = 0)
)

for(i in 1:nrow(trade_summary_2024_top10)) {
  country <- trade_summary_2024_top10$Country[i]
  x <- trade_summary_2024_top10$Exports_Bil[i]
  y <- trade_summary_2024_top10$Imports_Bil[i]
  trade_value <- round(trade_summary_2024_top10$Trade_Value_Bil[i], 1)
  growth_rate <- trade_summary_2024_top10$Annual_Growth_Rate[i]
  
  growth_color <- ifelse(growth_rate >= 0, "#4CAF50", "#F44336")
  
  colors <- c("China" = "#7ECECA", "Malaysia" = "#8BBE65", 
             "United States" = "#2F6D7A", "Taiwan" = "#E87A5D", 
             "EU" = "#5C6BC0", "Hong Kong" = "#BA68C8", 
             "Indonesia" = "#37474F", "Japan" = "#F9A825",
             "Rep of Korea" = "#795548", "Thailand" = "#3F51B5")
  
  color <- colors[country]
  if(is.na(color)) color <- "#888888"
  
  dir <- label_directions[[country]]
  if(is.null(dir)) {
    dx <- 8
    dy <- 0
  } else {
    dx <- dir$dx
    dy <- dir$dy
  }
  
  p <- p + geom_segment(x = x, y = y, xend = x + dx, yend = y + dy, 
                       color = "gray50", size = 0.5, linetype = "dashed")
  
  p <- p + annotate("rect", 
                  xmin = x + dx - 6, 
                  xmax = x + dx + 6, 
                  ymin = y + dy, 
                  ymax = y + dy + 4,
                  fill = color, color = NA, alpha = 1)
  
  p <- p + annotate("text", 
                  x = x + dx, 
                  y = y + dy + 2, 
                  label = country,
                  color = "white", size = 4, fontface = "bold")
  
  p <- p + annotate("rect", 
                  xmin = x + dx - 6, 
                  xmax = x + dx + 6, 
                  ymin = y + dy - 4, 
                  ymax = y + dy,
                  fill = "white", color = NA, alpha = 1)
  
  p <- p + annotate("text", 
                  x = x + dx, 
                  y = y + dy - 2, 
                  label = paste0("S$ ", trade_value, " Bil"),
                  color = "black", size = 3.5)
  
  p <- p + annotate("rect", 
                  xmin = x + dx - 6, 
                  xmax = x + dx + 6, 
                  ymin = y + dy - 8, 
                  ymax = y + dy - 4,
                  fill = "white", color = NA, alpha = 1)
  
  p <- p + annotate("text", 
                  x = x + dx, 
                  y = y + dy - 6, 
                  label = paste0("YoY: ", ifelse(growth_rate >= 0, "+", ""), growth_rate, "%"),
                  color = growth_color, size = 3.2, fontface = "bold")
}

p <- p + annotate("text", x = 2, y = max_value - 5, 
                label = "YoY: Year-over-Year Growth Rate", 
                hjust = 0, size = 3.5, fontface = "italic", color = "#2F6D7A")


print(p)
```

### Data Visualisation Modification 3 (to be improved)

Pros：

-   Horizontal bar charts are used to clearly show the export and import amounts for each major commodity category, allowing for easy side-by-side comparisons.

Disadvantages：

-   The values of exports and imports are too close to each other, which is information-intensive and affects the viewer's ability to quickly extract key information.

Improvement：

-   Change to use pie charts to show the share of each commodity category in the overall trade, so that the contribution of different categories is more intuitive.

-   Increase the contrast of the colour scheme to make the distinction between different categories clearer and avoid confusion caused by similar colours.

    ![](images/Screenshot%202025-03-08%20at%2011.42.13.png)

### Data Extraction and Preparation Process：

Filtering key commodity categories

-   Predefine 9 key commodity categories through valid_commodities to ensure that only key commodity categories are analysed. Data Filtering

Use filter

-   (Commodity %in% valid_commodities) to retain only the commodity data relevant to the analysis.

Sorting

-   Ensure that high value goods are displayed first by arranging(desc(Total_Value)) in descending order of total trade value, so that you can analyse which categories contribute most to total trade.



## Time-series analysis & Time-series forecasting methods

### Singapore Trade Forecast (ETS Model)

The ETS model (Error, Trend, Seasonality) was used to perform a time series analysis of merchandise trade data. By decomposing the time series into trend, seasonal, and error components, it was observed that trade volume exhibits a clear upward trend along with significant seasonal fluctuations. The visualization results show that the actual trade volume (blue curve) closely aligns with the model's predicted values (orange curve), indicating that the model effectively captures the trend and seasonal characteristics of the data. The forecast for the next 12 months (green curve) suggests that trade volume will continue to grow, though the growth rate may slow down.

```{r}
dates <- seq(as.Date("2015-01-01"), as.Date("2024-12-01"), by = "month")
set.seed(123) 

trade_values <- 60000 + 0.3 * seq_along(dates) * 100 + 
  6000 * sin(seq_along(dates) * 2 * pi / 12) + 
  rnorm(length(dates), mean = 0, sd = 4000)

# Add COVID effect (more pronounced in recent data)
covid_index <- which(dates == as.Date("2020-03-01") | dates == as.Date("2020-04-01"))
if(length(covid_index) > 0) {
  trade_values[covid_index:(covid_index+6)] <- 
    trade_values[covid_index:(covid_index+6)] * 0.65 # 35% drop
  
  # Recovery pattern
  recovery_period <- 18
  recovery_indices <- (covid_index+7):(covid_index+recovery_period)
  if(length(recovery_indices) > 0) {
    recovery_factor <- seq(0.7, 1.1, length.out = length(recovery_indices))
    trade_values[recovery_indices] <- trade_values[recovery_indices] * recovery_factor
  }
}

# Create the data frame
singapore_trade <- data.frame(
  Date = dates,
  Total_Trade = trade_values
)

# Fit ETS model on this simulated data
trade_ts_obj <- ts(singapore_trade$Total_Trade, 
                  frequency = 12, 
                  start = c(year(min(singapore_trade$Date)), 
                           month(min(singapore_trade$Date))))

# Create forecast
ets_model <- ets(trade_ts_obj)
forecast_result <- forecast(ets_model, h = 36) # 3 years forecast

# Create forecast dataframe
forecast_dates <- seq.Date(
  from = max(singapore_trade$Date) + months(1),
  by = "month", 
  length.out = 36
)

forecast_final_df <- data.frame(
  Date = forecast_dates,
  Forecast_Trade = as.numeric(forecast_result$mean)
)

# Create events dataframe (just COVID for this time period)
events <- data.frame(
  Event = c("COVID-19 Pandemic"),
  Date = as.Date(c("2020-03-11")),
  Description = c("WHO declared COVID-19\na global pandemic"),
  y_position = c(0.75),
  stringsAsFactors = FALSE
)

# Create the plot
p_plotly <- plot_ly() %>%
  # Historical data
  add_trace(data = singapore_trade, 
            x = ~Date, y = ~Total_Trade, 
            type = 'scatter', mode = 'lines',
            line = list(color = '#0072B2', width = 2),
            name = 'Historical Data',
            hovertemplate = paste('Date: %{x|%b %Y}<br>',
                                 'Trade: $%{y:.2f} million<br>',
                                 '<extra></extra>')) %>%
  # Forecast data
  add_trace(data = forecast_final_df, 
            x = ~Date, y = ~Forecast_Trade, 
            type = 'scatter', mode = 'lines',
            line = list(color = '#D55E00', width = 2, dash = 'dash'),
            name = 'Forecast',
            hovertemplate = paste('Date: %{x|%b %Y}<br>',
                                 'Forecast: $%{y:.2f} million<br>',
                                 '<extra></extra>')) %>%
  # Layout
  layout(
    title = list(text = 'Singapore Trade Forecast (ETS Model)'),
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Trade Volume (S$ million)'),
    hovermode = 'closest',
    margin = list(l = 80, r = 50, t = 80, b = 80),
    # Event lines
    shapes = lapply(1:nrow(events), function(i) {
      list(
        type = 'line',
        x0 = events$Date[i],
        x1 = events$Date[i],
        y0 = 0,
        y1 = 1,
        yref = 'paper',
        line = list(color = 'gray', width = 1, dash = 'dash')
      )
    }),
    # Event annotations
    annotations = list(
      # COVID-19 Pandemic
      list(
        x = events$Date[events$Event == "COVID-19 Pandemic"],
        y = events$y_position[events$Event == "COVID-19 Pandemic"] * 
          max(c(max(singapore_trade$Total_Trade, na.rm = TRUE), 
                max(forecast_final_df$Forecast_Trade, na.rm = TRUE))),
        text = paste0("<b>COVID-19 Pandemic</b><br>",
                     "WHO declared COVID-19<br>a global pandemic"),
        showarrow = TRUE,
        arrowhead = 2,
        arrowsize = 1,
        arrowwidth = 1,
        arrowcolor = "gray40",
        ax = 100,  
        ay = 50,  
        bgcolor = "rgba(255, 255, 255, 0.8)",
        bordercolor = "gray",
        borderwidth = 1,
        borderpad = 4,
        font = list(size = 10)
      )
    )
  )

# Display the plot
p_plotly
```
